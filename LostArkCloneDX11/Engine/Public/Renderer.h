#pragma once

/* 객체를 생성시에 그려져야할 객체라면 오브젝트 매니져에도 추가하고, 렌더러에도 추가한다.(x)*/
/* 매 프레임당 객체안에서 그려져야하는가를 판단하고 그려져야한다라면 렌더러에 등록하는 작업을 수행한다. */

/* 화면에 그려져야할 객체들을 그리는 순서대로 분류하여 보관한다. */
/* 보관하고 잇는 객체들을 보관한 순서대로 렌더함수를 호출해 준다. 컨테이너를 클리어해버린다. */
#include "Base.h"

NS_BEGIN(Engine)

class CRenderer final : public CBase
{
private:
	CRenderer(ID3D11Device* pDevice, ID3D11DeviceContext* pContext);
	virtual ~CRenderer() = default;

public:
	HRESULT Initialize();
	HRESULT Add_RenderGroup(RENDER eRenderGroup, class CGameObject* pRenderObject);
	void	Render();

private:
	ID3D11Device*				m_pDevice = { nullptr };
	ID3D11DeviceContext*		m_pContext = { nullptr };
	ID3D11DepthStencilState*	m_pDSState_Priority = { nullptr };
	ID3D11DepthStencilState*	m_pDSState_UI = { nullptr };
	ID3D11BlendState*			m_pBlendState = { nullptr };

	_float						m_fFactor[4] = {};

	list<class CGameObject*>	m_RenderObjects[ENUM_TO_INT(RENDER::END)];

	_float4x4					m_OrthographicViewMatrix = {};
	_float4x4					m_OrthographicMatrix = {};
	
private:
	void Render_Priority();
	void Render_NonBlend();
	void Render_Blend();
	void Render_UI();

	void Sort_AlphaObject();
	void Sort_UI();

public:
	static CRenderer* Create(ID3D11Device* pDevice, ID3D11DeviceContext* pContext);
	virtual void Free();
};

NS_END